package com.ahlquist.sms.jpa.service;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.Query;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;

import com.ahlquist.sms.jpa.dao.StudentDAO;
import com.ahlquist.sms.jpa.entitymodels.Course;
import com.ahlquist.sms.jpa.entitymodels.Student;

/*
 * This class provides the methods to be used in the main method.
 * All these methods are related to the Student class, and Student manipulation.
 * 
 */
public class StudentService implements StudentDAO {
	List<Student> studentList = new ArrayList<Student>();
	boolean validationStatus = false;

/*
 * This method retrieves all the students from the database.
 */
	public List<Student> getAllStudents() {
		SessionFactory factory = new Configuration().configure().buildSessionFactory();
		Session session = factory.openSession();
		String hql = "FROM Student";
		Query query = session.createQuery(hql);
		@SuppressWarnings("unchecked")
		List<Student> results = query.getResultList();
		studentList = results;
		session.close();
		factory.close();
		return studentList;

	}
/*
 * This method uses the list generated by getAllStudents to 
 * select a specific student by their email.
 */
	public Student getStudentByEmail(String sEmail) {
		Student gotStudent = new Student();
		for (Student s : studentList) {
			if (s.getsEmail().equals(sEmail)) {
				gotStudent = s;
			}
		}
		return gotStudent;
	}
/*
 * This method validates a student from the student list to ensure that 
 * the student credentials are valid.
 */
	public boolean validateStudent(String sEmail, String sPassword) {
		for (Student s : studentList) {
			if (s.getsEmail().equals(sEmail) && s.getsPass().equals(sPassword)) {
				validationStatus = true;
				return validationStatus;
			}
		}
		return validationStatus;
	}
/*
 * This method registers a student to the course
 * and saves that connection to the automatically-generated
 * student_course table which connects the primary keys
 * from both the Student, and Course tables in the database.
 */
	public void registerStudentToCourse(String sEmail, int cId) {
		SessionFactory factory = new Configuration().configure().buildSessionFactory();
		Session session = factory.openSession();
		Transaction tx = session.beginTransaction();
		if (validationStatus = true) {
			try {
				if (cId < 10 && 0 < cId) {
					CourseService cS = new CourseService();
					cS.getAllCourses();
					Student s = this.getStudentByEmail(sEmail);
					Course c = cS.getCourseById(cId);
					s.getsCourses().add(c);
					session.saveOrUpdate(s);
					tx.commit();
				}
				else {
					System.out.println("That is not a valid course!");
				}

			} catch (Exception NonUniqueObjectException) {
				System.out.println("You have already registered for this course!");
			} finally {
				session.close();
				factory.close();
			}
		} else {
			System.out.println("Unfortunately, your credentials are invalid.");
		}

	}

	/*
	 * This method retrieves all the courses which a student is 
	 * registered for.
	 */
	public List<Course> getStudentCourses(String sEmail) {
		SessionFactory factory = new Configuration().configure().buildSessionFactory();
		Session session = factory.openSession();
		Student s = getStudentByEmail(sEmail);
		List<Course> sC = s.getsCourses();
		System.out.printf("%-4s %-30s %-30s\n", "Id", "Instructor Name", "Course Name");
		for (Course c : sC) {
			System.out.printf("%-4s %-30s %-30s\n", c.getcId(), c.getcInstructorName(), c.getcName());
		}
		session.close();
		factory.close();
		return sC;
	}
}
